Magesh Kuppan

Schedule:
    Commence    : 9:30 AM
    Tea Break   : 11:00 AM (20 mins)
    Lunch Break : 1:00 PM (1 Hr)
    Tea Break   : 3:30 PM (20 mins)
    Wind up     : 5:30 PM

Methodoly:
    Hands on driven
    No powerpoints

About You:
    Name
    Total Experience
    Primary skillset
    Experience in Golang
    Any interesting books / shows you read / watched recently

Go ?
    1. Concurrency
    2. Implicit implementation of interfaces
    3. Standard library
    4. Simplicity (only 25 keywords)
    5. Easy to unit test, inbuilt testing framework
    6. Compiling to native code
    7. Performance compared to C
    8. Higher Order Functions
    9. Built in Garbage Collection

Higher Order Functions
    Functions are treated as data
        1. Functions can be assigned to variables
        2. Functions can be passed as arguments to other functions
        3. Functions can be returned by other functions
        4. Closures

Goroutines
    1. Go routines are lightweight threads of execution
    2. 4KB of stack space
    3. Go runtine has a builtin scheduler
    4. 'go' keyword

    Channels
        ch := make(chan int)

        sending data to the channel
            ch <- 10
            blocking operation?
                it depends...
                    if a read operation on the channel is not initiated yet, then the write operation will be blocked
                    If the channel is a buffered channel and the channel is full, then the write operation will be blocked

        receiving data from the channel
            val := <- ch
            receiving data from the channel is a blocking operation

    Never assume during Concurrency programming
        1. Time taken for a goroutine to complete
        2. Sequence of execution of goroutines


RPC
    Remote Procedure Call
        .NET Remoting
        Java RMI

    Web Services
    REST Services

Read Only
Read (99%) + Append & Update (1%)
Analytical 
Real time


Relational Databases are optimized for transactions
    Maintain the integrity of the data when they are UPDATED


Service?
    Operations?
    Messages?

protocol buffers
    Serialization

Raw = 56
XML = ~5 times
JSON = 3 times

P101,Pen,10,100,Stationary
P102,Pencil,20,200,Stationary

GRPC
    http2 (formerly SPDY)

    Communication Patterns
        Request & Response
        Server Streaming (one request & multiple responses)
        Client Streaming (multiple requests & one response)
        Bidirectional Streaming (multiple requests & multiple responses)

Steps
    1. Define the contract (service, operation, message (input & output)) (using protobuf)
    2. Generate the proxy & stub
    3. Implement the service & host the server (server-side)
    4. Use the proxy to call the server (client-side)

Tools:
    
    Installation
        go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
        go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest

        (when the above is installed, executables are created in the gopath/bin folder. Make sure this path is set in environment variables)

    Windows
        Install the binaries from https://github.com/protocolbuffers/protobuf/releases/

    Mac
        brew install protoc-gen-go
        brew install protoc-gen-go-grpc

